"""
Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами
на промежутке [-100; 100).
Выведите на экран исходный и отсортированный массивы.
"""
import random

array = [random.randint(-100, 100) for _ in range(10)]


def sort_bubble(data):
    l = len(data)
    n = 0
    while n < l:
        is_moved = False
        # итерацию начинаю считать с нуля, но увеличиваю ее в начале цикла, для удобства
        n += 1
        for i in range(l - n):
            if data[i] < data[i + 1]:
                data[i], data[i + 1] = data[i + 1], data[i]
                # вроде все чем можно усовершенствовать пузырек - это добавить условие на проверку изменения массива при
                # последнем проходе
                if not is_moved:
                    is_moved = not is_moved
            # вывод изменений во время прохода по массиву
            print(data, i)
        # вывожу промежуточные значения, ну и номер прохода, и результат проверки "было ли изменение"(а был ли мальчик?...)
        print(data, n, is_moved if is_moved else 'Это наглая ложь!')
        if not is_moved:
            break
    # я решил воспользоваться и изменяемостью массива и возвратом функции, просто не использовал возврат значений через
    # параметры функции, вот решил "закрепить" на практике, хотя я придерживаюсь либо возврат результата через return
    # либо возврат результата через параметры, потом код легче читать
    return n


iters = sort_bubble(array)
print(array, iters)
